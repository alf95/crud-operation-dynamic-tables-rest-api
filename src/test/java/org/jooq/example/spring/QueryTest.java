package org.jooq.example.spring;

import static org.jooq.impl.DSL.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.jooq.*;
import org.jooq.example.spring.dto.FilterQuery;
import org.jooq.example.spring.dto.InfoTable;
import org.jooq.example.spring.service.DefaultDBService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

@SpringBootTest(classes = Application.class)
public class QueryTest {

	@Autowired
	private DSLContext dsl;

	@Autowired
	private DefaultDBService defaultDBService;

	@Test
	public void testSelect(){
		Select<?> q = dsl.select(field("id")).from(table("GeneratorNumber"));
		String sql = q.getSQL();
		System.out.println(sql);
		//List<Object> bindValues = q.getBindValues();
		List<Map<String, Object>> res = q.fetch().intoMaps();
		System.out.println(res);
		assertEquals(true, res.size() > 0);

	}


	@Test
	public void testSelectService(){
		InfoTable infoTable = new InfoTable();
		infoTable.setEntity("GeneratorNumber");
		infoTable.setPopulate(Arrays.asList(new String[]{"id", "registro", "tipoRichiesta"}));
		List<FilterQuery> filters = new ArrayList<>();
		FilterQuery f1 = new FilterQuery();
		f1.setName("tipoRichiesta");
		f1.setValue("all");
		//f1.setOp("eq");
		FilterQuery f2 = new FilterQuery();
		f2.setName("registro");
		f2.setValue("PG");
		f2.setOp("eq");
		filters.add(f1);
		filters.add(f2);
		infoTable.setFilters(filters);
		System.out.println(defaultDBService.select(infoTable));

	}

	@Test
	public void testGetPK(){
		Table<?> table = dsl.meta().getSchemas("jbpm6").get(0).getTable("GeneratorNumber");
		List<? extends TableField<?, ?>> fieldsArray = table.getPrimaryKey().getFields();
		List columnsPK = new ArrayList();
		fieldsArray.forEach(tableField -> {
			columnsPK.add(tableField.getName());
		});
		assertEquals("id", columnsPK.get(0));
	}


	/*@Test
	public void testJoin() throws Exception {
		// All of these tables were generated by jOOQ's Maven plugin
		Book b = BOOK.as("b");
		Author a = AUTHOR.as("a");
		BookStore s = BOOK_STORE.as("s");
		BookToBookStore t = BOOK_TO_BOOK_STORE.as("t");

		Result<Record3<String, String, Integer>> result = create.select(a.FIRST_NAME, a.LAST_NAME, countDistinct(s.NAME))
				.from(a).join(b).on(b.AUTHOR_ID.equal(a.ID)).join(t).on(t.BOOK_ID.equal(b.ID)).join(s)
				.on(t.BOOK_STORE_NAME.equal(s.NAME)).groupBy(a.FIRST_NAME, a.LAST_NAME).orderBy(countDistinct(s.NAME).desc())
				.fetch();

		assertEquals(2, result.size());
		assertEquals("Paulo", result.getValue(0, a.FIRST_NAME));
		assertEquals("George", result.getValue(1, a.FIRST_NAME));

		assertEquals("Coelho", result.getValue(0, a.LAST_NAME));
		assertEquals("Orwell", result.getValue(1, a.LAST_NAME));

		assertEquals(Integer.valueOf(3), result.getValue(0, countDistinct(s.NAME)));
		assertEquals(Integer.valueOf(2), result.getValue(1, countDistinct(s.NAME)));
	}

	@Test
	public void testActiveRecords() throws Exception {
		Result<BookRecord> result = create.selectFrom(BOOK).orderBy(BOOK.ID).fetch();

		assertEquals(4, result.size());
		assertEquals(asList(1, 2, 3, 4), result.getValues(0));
	}*/
}
